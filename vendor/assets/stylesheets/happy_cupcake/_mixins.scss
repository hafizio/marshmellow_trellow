/* Happy Cupcake Mixins */
@mixin base-text-shadow {
  text-shadow:0px 1px 0px #2f6627;
}

@mixin border-box {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin box-shadow($box-shadow...) {
  -webkit-box-shadow: $box-shadow;
  box-shadow: $box-shadow;
}

@mixin rounded-corners($border-radius) {
  -webkit-border-radius: $border-radius;
  border-radius: $border-radius;
  background-clip: padding-box;
  /* useful if you don't want a bg color from leaking outside the border: */

}

@mixin active-glow($color) {
  &:focus {
    border: solid 1px $color;
    outline: 0;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color);
  }
  &[type="radio"] {
    @include rounded-corners(18px);
  }
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);
}

@mixin remove-active-glow {
  &:focus {
    border: none 0px transparent;
    outline: 0;
    @include box-shadow(inset 0 0px 0px rgba(0,0,0,.0), 0 0 0px transparent);
  }
  &[type="radio"] {
    @include rounded-corners(18px);
  }
}

@mixin striped_background($color) {
  background-color: $color;
  background: linear-gradient(45deg, $color 25%,
    lighten($color, 10%) 25%, lighten($color, 10%) 50%,
    $color 50%, $color 75%,
    lighten($color, 10%) 75%);
  background-size: 10px 10px;
}

@mixin pointer($side, $width, $height, $border-color, $fill-color,
$border-thickness) {
  position: relative;
  $adjusted-height: ($height / 2);

  @if $side == "top" {
    /* position at top */
    &:after {
      border-width: 0 $width $adjusted-height;
      margin-left: (-1 * $width);
      top: (-1 * $adjusted-height) + 1;
      left: 50%;
      border-color: $fill-color transparent;
    }
    &:before {
      border-width: 0 ($width + $border-thickness) ($adjusted-height +
      $border-thickness);
      margin-left: (-1 * ($width + $border-thickness));
      top: (-1 * ($adjusted-height + $border-thickness));
      left: 50%;
      border-color: $border-color transparent;
    }
  }

  @if $side == "bottom" {
    /* position at bottom */
    &:after {
      border-width: $adjusted-height $width 0;
      margin-left: (-1 * $width);
      bottom: (-1 * $adjusted-height) + 1;
      left: 50%;
      border-color: $fill-color transparent;
    }
    &:before {
      border-width: ($width + $border-thickness) ($adjusted-height +
      $border-thickness) 0;
      margin-left: (-1 * ($width + $border-thickness));
      bottom: (-1 * ($adjusted-height + $border-thickness));
      left: 50%;
      border-color: $border-color transparent;
    }
  }

  /* draft: */
  @if $side == "left" {
    /* position at left */
    &:after {
      border-width: $width $adjusted-height $width 0;
      margin-top: (-1 * $adjusted-height);
      left: (-1 * $adjusted-height) + 3;
      top: 50%;
      border-color: transparent $fill-color;
    }
    &:before {
      border-width: ($width + $border-thickness) ($adjusted-height +
      $border-thickness) ($width + $border-thickness) 0;
      margin-top: (-1 * $adjusted-height);
      left: (-1 * $adjusted-height) + 3;
      top: 50%;
      border-color: transparent $border-color;
    }
  }

  /* etc. do other positions */
  &:after {
    content: '';
    position: absolute;
    border-style: solid;
    display: block;
    width: 0;
    z-index: 1;
  }

  &:before {
    content: '';
    position: absolute;
    border-style: solid;
    display: block;
    width: 0;
    z-index: 0;
  }
}

/* grid mixins */

@mixin build-cols {
  $col-width: (1.0 / $num-cols);
  @for $i from 1 through $num-cols {
    .col-#{$i} {
     width: percentage($col-width * $i);
     float: left;
     padding: $base-padding ($grid-gutter-width / 2.0);
     @include border-box;
    }
     .col-offset-#{$i} {
     margin-left: percentage($col-width * $i);
   }
  }
  @media(max-width: $screen-sm) {
    @for $i from 1 through $num-cols {
      .col-#{$i} {
        width: 100%;
      }
    }
  }

}
